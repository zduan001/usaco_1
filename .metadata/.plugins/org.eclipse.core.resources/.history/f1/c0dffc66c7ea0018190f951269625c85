#include <bits/stdc++.h>

using namespace std;
typedef pair<int,int> pii;

bool answer = false;
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
set<pair<pii, pii>> visited;
vector<set<pair<int, int>>> blocks;
int min_x, min_y, max_x, max_y;


bool checkOverlap(set<pii> first, set<pii> second){
	for(auto i : second){
		if(first.find(i) != first.end()){
			return true;
		}
	}

	return false;
}

bool separated(set<pii> first, set<pii> second){
	set<pii> other;

	for(auto i : first){
		other.insert(i);

		for(int j = 0; j < 4; j++){
			other.insert(make_pair(i.first + dx[j], i.second + dy[j]));
		}
	}

	return !checkOverlap(first, second);
}

void cinEverything(int N, set<pii>& pieces){
	for(int i = 0; i < N; i++){
		int one, two;
		cin >> one >> two;
		pieces.insert(make_pair(one, two));
		min_x = min(min_x, one);
		min_y = min(min_y, two);
		max_x = max(max_x, one);
		max_y = max(max_y, two);
	}
}

set<pair<int,int>> shift(set<pii> blocks, pii shift){
	set<pair<int, int>> res;

	for(auto itr : blocks){
		int first = itr.first + shift.first;
		int second = itr.second + shift.second;
		res.insert(make_pair(first, second));
	}
	return res;
}

void DFS(vector<set<pii>> blocks, pair<pii, pii> cur){
	if(answer) return;

	if(separated(blocks[0], shift(blocks[1], cur.first)) &&
			separated(blocks[0], shift(blocks[2], cur.second)) &&
			separated(shift(blocks[1], cur.first), shift(blocks[2], cur.second))){
		answer = true;
		return;
	}

	if(visited.find(cur) != visited.end()) return;
	visited.insert(cur);

	for(int i = 0; i < 4; i++){
		cur.first.first += dx[i];
		cur.first.second += dy[i];
		DFS(blocks, cur);
		cur.first.first -= dx[i];
		cur.first.second -= dy[i];
		cur.second.first += dx[i];
		cur.second.second += dy[i];
		DFS(blocks, cur);
		cur.second.first -= dx[i];
		cur.second.second -= dy[i];
	}
}

void print_out() {
	int n = max_x - min_x;
	int m = max_y - min_x;
	vector<vector<char>> board(n, vector<char>(m, '.'));
	for (int i = 0; i < blocks.size(); i++) {
		for (int j = 0; j < blocks[i].size(); j++){
			int x = blocks[i][j].first - min_x;
			int y = blocks[i][j].second - min_y;
			board[x][y] = (char)(i + '1');
		}
	}
}

int main() {
	int N1, N2, N3;
	cin >> N1 >> N2 >> N3;
	set<pair<int, int>> first, second, third;

	cinEverything(N1, first);
	cinEverything(N2, second);
	cinEverything(N3, third);
	blocks = {first, second, third};

//	cout << checkOverlap(third, second);  // 1 = true
//	cout << separated(first, second) << endl;


	DFS(blocks, {{0,0}, {0,0}});

//	if(answer){
//		answer = false;
//
//		DFS(blocks, set<pair<int, int>> (), make_pair(0, 0), 2, -1);
//		if(answer){
//			cout << true << endl;
//			return 0;
//		}
//	}
//
//	answer = false;
//
//	DFS(blocks, set<pair<int, int>> (), make_pair(0, 0), 2, 1);
//
//	if(answer){
//		answer = false;
//
//		DFS(blocks, set<pair<int, int>> (), make_pair(0, 0), 1, -1);
//		if(answer){
//			cout << true << endl;
//			return 0;
//		}
//	}

	cout << answer << endl;


	return 0;
}
