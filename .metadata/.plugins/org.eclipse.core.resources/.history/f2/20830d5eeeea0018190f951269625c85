#include <bits/stdc++.h>
using namespace std;

int main() {
	int n;
	while(cin >> n) {
		unordered_map<string, int> map_x;
		unordered_map<int, string> reverse_map;
		vector<vector<int>> graph;
		if( n == 0) return 0;
		int index = 0;
		for (int i = 0; i < n; i++) {
			int count;
			cin >> count;
			string s;
			vector<string> ne;
			for (int j = 0; j < count; j++) {
				cin >> s;
				ne.push_back(s);
			}
			vector<int> ne_n;
			for (int j = 0; j < ne.size(); j++) {
				if (map_x.find(ne[j]) == map_x.end()) {
					map_x[ne[j]] = index;
					reverse_map[index] = ne[j];
					index++;
				}
				ne_n.push_back(index);
			}
			graph.push_back(ne_n);
		}
		// construct graph;
		vector<vector<bool>> w(index, vector<bool>(index, false));
		for (auto row: graph) {
			for (int j = 0; j < row.size() -1; j ++) {
				w[row[j]][row[j+1]] = true;
			}
		}

		int m;
		cin >> m;
		string s1, s2;
		for (int i = 0; i < m; i++) {
			cin >> s1 >> s2;
			w[map_x[s1]][map_x[s2]] = true;
		}

		for (int i = 0; i < index; i++) {
			for (int j = 0; j < index; j++) {
				cout << w[i][j] << " ";
			}
			cout << endl;
		}

	}
	return 0;
}
