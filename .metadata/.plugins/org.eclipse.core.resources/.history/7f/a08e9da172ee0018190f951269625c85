#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    void merge(vector<int>& nums, int start, int end, int mid) {
    	int i, j, k;
		int n1 = mid - start + 1;
    	int n2 = end - mid;
    	vector<int>l, r;
    	for (int i = 0; i < n1; i ++) {
    		l.push_back(nums[start +i]);
    	}
    	for (int j = 0; j < n2; j++) {
    		r.push_back(nums[mid+1+j]);
    	}

    	i = 0;
    	j = 0;
    	k = 0;
    	while(i < n1 && j < n2) {
    		if (l[i] <= r[j]) {
    			nums[start + k ] = l[i];
    			i++;
    		} else {
    			nums[start + k] = r[j];
    		}
    		k++;
    	}
    	while(i < n1) {
    		nums[start + (k++)] = l[i++];
    	}
    	while( j < n2) {
    		nums[start + (k++)] = r[j++];
    	}
    }

    void mergesort(vector<int>& nums, int start, int end) {
    	if (start >= end) {
    		return;
    	}
    	int mid = start + (mid-start)/2;
    	mergesort(nums, start, mid);
    	mergesort(nums, mid+1, end);
    	merge(nums, start, end, mid);
    }

    vector<int> countSmaller(vector<int>& nums) {
    	mergesort(nums, 0, nums.size() -1 );
    	return nums;
    }
};

int main() {
	vector<int> input = {5,2,6,1};
	Solution* s = new Solution();
	s->countSmaller(input);
	for (auto i : input) {
		cout << i << " ";
	}

	return 0;
}
